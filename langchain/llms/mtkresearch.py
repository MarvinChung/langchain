"""Wrapper around HuggingFace APIs."""
from typing import Any, Dict, List, Mapping, Optional

import requests
from pydantic import Extra, root_validator

from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens
from langchain.utils import get_from_dict_or_env
import time


DEFAULT_MODEL_ID = "bloom-zh-1b1"
DEFAULT_TASK = "text-generation"
VALID_TASKS = ("text2text-generation", "text-generation")

class MTKResearch(LLM):
    """Wrapper around MTKResearch Inference Endpoints.

    Only supports `text-generation` and `text2text-generation` for now.

    Example:
        .. code-block:: python

            from langchain.llms import MTKResearch
            
            mr = MTKResearch(
                endpoint_url=endpoint_url,
                mtkresearch_api_token="my-api-key"
            )
    """

    model_id: str = DEFAULT_MODEL_ID
    """Model name to use."""
    task: str = DEFAULT_TASK
    """Task to call the model with. Should be a task that returns `generated_text`."""
    model_kwargs: Optional[dict] = None
    """Key word arguments to pass to the model."""

    mtkresearch_api_token: Optional[str] = None

    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @root_validator()
    def validate_environment(cls, values: Dict) -> Dict:
        """Validate that api key and python package exists in environment."""
        mtkresearch_api_token = get_from_dict_or_env(
            values, "mtkresearch_api_token", "MTKRESEARCH_API_TOKEN"
        )

        try:
            headers = {
                "Content-Type": "application/json",
            }

            payload = {
                "token": mtkresearch_api_token,
            }

            response = requests.post(
                "https://create.mtkresearch.com/llm/api/v2/tokencheck",
                headers=headers,
                json=payload
            )
            json_response = response.json()
            if json_response["metadata"]["error_type"] == "AUTHENTICATION_ERROR":
                raise ValueError(
                    f"Encounter AUTHENTICATION_ERROR, your token might be invalid or expired. {json_response}"
                )

        except Exception as e:
            raise ValueError(
                "Could not authenticate with mtkresearch. "
                "Please check your API token."
                f"{e}"
            ) from e

        
        return values

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        _model_kwargs = self.model_kwargs or {}
        return {
            **{"model_type": self.model_id, "model_object": self.task},
            **{"model_kwargs": self.model_kwargs},
        }

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "mrtwresearch"

    def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
        """Call out to MTKResearch inference endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = mr("Tell me a joke.")
        """
        _model_kwargs = self.model_kwargs or {}

        # payload samples
        parameter_payload = {
            **{"prompt": prompt},
            **self._identifying_params
        }

        # HTTP headers for authorization
        headers = {
            "Authorization": f"Bearer {self.mtkresearch_api_token}",
            "Content-Type": "application/json",
        }

        # send request
        try:
            response = requests.post(
                "https://create.mtkresearch.com/llm/api/v2/tasks", headers=headers, json=parameter_payload
            )
        except requests.exceptions.RequestException as e:  # This is the correct syntax
            raise ValueError(f"Error raised by inference endpoint: {e}")

        def fetch_task_with_backoff(uuid: str, api_key: str, retry_options: Dict[str, int]) -> requests.Response:
            retries = 0
            def try_fetch() -> requests.Response:
                nonlocal retries
                try:
                    headers = {
                        'accept': 'application/json',
                        'Authorization': f'Bearer {api_key}'
                    }
                    response = requests.get(f'https://create.mtkresearch.com/llm/api/v2/tasks/{uuid}', headers=headers)

                    json_response = response.json()
                    
                    if json_response['task']['status'] == 'READY':
                        return json_response
                    else:
                        if retries < retry_options['maxNumberOfRetry']:
                            retries += 1
                            wait_time = min(retry_options['initialDelay'] * 2 ** (retries - 1), retry_options['maxDelay'])
                            time.sleep(wait_time)
                            return try_fetch()
                        else:
                            raise Exception('Max number of retries reached')
                except Exception as error:
                    raise error

            return try_fetch()

        retry_options = {'maxNumberOfRetry': 5, 'initialDelay': 1, 'maxDelay': 30}
        try:
            json_response = fetch_task_with_backoff(response.json()["task"]["uuid"], self.mtkresearch_api_token, retry_options)
        except Exception as error:  # This is the correct syntax
            raise ValueError(f"Error raised by waiting model: {e}")

        
        if len(json_response["metadata"]["error_message"]) > 0:
            raise ValueError(
                f"Error raised by inference API: {json_response['metadata']['error_message']}"
            )
        if self.task == "text-generation":
            # Text generation return includes the starter text.
            text = json_response["task"]["outputs"][0]["text"][len(prompt) :]
        elif self.task == "text2text-generation":
            text = json_response["task"]["outputs"][0]["text"]
        else:
            raise ValueError(
                f"Got invalid task {self.task}, "
                f"currently only {VALID_TASKS} are supported"
            )
        if stop is not None:
            # This is a bit hacky, but I can't figure out a better way to enforce
            # stop tokens when making calls to huggingface_hub.
            text = enforce_stop_tokens(text, stop)
        return text
